"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ix_1 = require("ix");
const apache_arrow_1 = require("apache-arrow");
const empty_1 = require("../assign/empty");
const recordbatches_1 = require("../merge/recordbatches");
const util_1 = require("../util");
async function* fullJoin(mergeOn, target, source) {
    const inners = ix_1.AsyncIterable.as(source instanceof apache_arrow_1.Table ? source.chunks : source);
    const outers = ix_1.AsyncIterable.as(target instanceof apache_arrow_1.Table ? target.chunks : target);
    const { newRows, recordBatches, outerFieldsMap } = await inners.reduce(fullJoinInner, { mergeOn, newRows: [], recordBatches: outers, recordBatchKeyMaps: [] });
    let numNewRows;
    let schema = null;
    let batch = null;
    for await (batch of recordBatches) {
        yield (batch = new apache_arrow_1.RecordBatch(schema || (schema = batch.schema), batch.data));
    }
    if (!batch || !schema || newRows.length <= 0) {
        return;
    }
    if ((numNewRows = newRows.map(([xs]) => xs.length).reduce((x, y) => x + y, 0)) <= 0) {
        return;
    }
    ([batch] = empty_1.assignNewEmptyColumns([...outerFieldsMap.entries()].map(([, [f]]) => f), new apache_arrow_1.RecordBatch(new apache_arrow_1.Schema([]), numNewRows, []), new Map(), batch, outerFieldsMap));
    let i = -1;
    for (const [idxs, inner] of newRows) {
        for (let j = -1, n = idxs.length; ++j < n;) {
            batch.set(++i, inner.get(idxs[j]));
        }
    }
    yield new apache_arrow_1.RecordBatch(schema, batch.data);
}
exports.fullJoin = fullJoin;
async function fullJoinInner(state, inner) {
    let newRowIndices;
    let newFields = [];
    let outerRecordBatchIndex = -1;
    let mergeOn = state.mergeOnKey;
    let recordBatch;
    let outerFieldsMap = state.outerFieldsMap;
    let innerFieldsMap = state.innerFieldsMap;
    let recordBatches = [];
    let recordBatchKeysMap;
    let recordBatchKeyMaps = state.recordBatchKeyMaps;
    if (outerFieldsMap && mergeOn) {
        newFields = util_1.findNewFields(outerFieldsMap, inner.schema.fields, mergeOn);
    }
    for await (const outer of state.recordBatches) {
        if (outer.schema === inner.schema) {
            recordBatches.push(outer);
            continue;
        }
        if (!mergeOn || !outerFieldsMap || !innerFieldsMap) {
            ([outerFieldsMap, innerFieldsMap, mergeOn] = createFullJoinState(state, outer, inner));
            if (mergeOn && !outerFieldsMap.has(mergeOn)) {
                continue;
            }
            if (!mergeOn || !innerFieldsMap.has(mergeOn)) {
                return state;
            }
            newFields = util_1.findNewFields(outerFieldsMap, inner.schema.fields, mergeOn);
        }
        ([recordBatch, outerFieldsMap] = empty_1.assignNewEmptyColumns(newFields, outer, outerFieldsMap, inner, innerFieldsMap));
        ([recordBatch, newRowIndices, recordBatchKeysMap] = recordbatches_1.mergeRecordBatches(mergeOn, recordBatchKeyMaps[++outerRecordBatchIndex], recordBatch, outerFieldsMap, inner, innerFieldsMap));
        recordBatches[outerRecordBatchIndex] = recordBatch;
        recordBatchKeyMaps[outerRecordBatchIndex] = recordBatchKeysMap;
        newRowIndices.length > 0 && state.newRows.push([newRowIndices, inner]);
    }
    if (outerRecordBatchIndex === -1) {
        recordBatches.push(inner);
    }
    state.recordBatches = ix_1.AsyncIterable.as(recordBatches);
    return state;
}
function createFullJoinState(state, outer, inner) {
    const outerFieldsMap = state.outerFieldsMap = util_1.assignFieldsMap(outer.schema.fields, state.outerFieldsMap);
    const innerFieldsMap = state.innerFieldsMap = util_1.assignFieldsMap(inner.schema.fields, state.innerFieldsMap);
    const mergeOn = state.mergeOnKey || (state.mergeOnKey = util_1.findMergeOnKey(state.mergeOn, outerFieldsMap));
    return [outerFieldsMap, innerFieldsMap, mergeOn];
}
//# sourceMappingURL=data:application/json;base64,