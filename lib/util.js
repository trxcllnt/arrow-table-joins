"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apache_arrow_1 = require("apache-arrow");
function fieldToKey(field) { return field.name; }
exports.fieldToKey = fieldToKey;
function newNullBitmap(length, fill = false) {
    return new Uint8Array(((length + 63) & ~63) >>> 3).fill(fill ? 255 : 0);
}
exports.newNullBitmap = newNullBitmap;
function newEmptyData(data, length) {
    const { type, values, valueOffsets, typeIds, childData } = data;
    const buffers = [, , newNullBitmap(length)];
    valueOffsets && (buffers[0] = new Int32Array(length + 1));
    values && (buffers[1] = new data.ArrayType(length));
    typeIds && (buffers[3] = new Int32Array(length));
    return data.clone(type, 0, length, length, buffers, childData.map((d) => newEmptyData(d, length)));
}
exports.newEmptyData = newEmptyData;
function assignFieldsMap(fields = [], map = new Map(), offset = map.size) {
    return fields.reduce((map, f, i) => map.has(fieldToKey(f))
        ? map : map.set(fieldToKey(f), [f, offset + i]), map || new Map());
}
exports.assignFieldsMap = assignFieldsMap;
function mergeMaps(target = new Map(), ...sources) {
    return sources.reduce((target, source) => {
        source.forEach((val, key) => target.set(key, val));
        return target;
    }, target || new Map());
}
exports.mergeMaps = mergeMaps;
function findNewFields(map, fields, mergeOn) {
    return fields.filter((f) => !map.has(f = fieldToKey(f)) && (f !== mergeOn));
}
exports.findNewFields = findNewFields;
function findCommonFields(map, fields, mergeOn) {
    return fields.filter((f) => map.has(f = fieldToKey(f)) && (f !== mergeOn));
}
exports.findCommonFields = findCommonFields;
function findMergeOnKey(mergeOn, fieldsMap) {
    if (!(mergeOn instanceof apache_arrow_1.Field)) {
        for (let [, [f]] of fieldsMap) {
            if (f.name === mergeOn) {
                return fieldToKey(f);
            }
        }
        if (!(mergeOn instanceof apache_arrow_1.Field)) {
            throw new ReferenceError(`'mergeOn' must be an Arrow Field or the name of a field in the target table. Received ${mergeOn}`);
        }
    }
    return fieldToKey(mergeOn);
}
exports.findMergeOnKey = findMergeOnKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0NBQXFEO0FBR3JELFNBQWdCLFVBQVUsQ0FBQyxLQUFZLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUEvRCxnQ0FBK0Q7QUFFL0QsU0FBZ0IsYUFBYSxDQUFDLE1BQWMsRUFBRSxJQUFJLEdBQUcsS0FBSztJQUN0RCxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFGRCxzQ0FFQztBQUVELFNBQWdCLFlBQVksQ0FBcUIsSUFBYSxFQUFFLE1BQWM7SUFDMUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDaEUsTUFBTSxPQUFPLEdBQVMsQ0FBQyxFQUFDLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFlLENBQUM7SUFDL0QsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sSUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRCxPQUFPLElBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQ2Is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YSc7XG5pbXBvcnQgeyBEYXRhLCBGaWVsZCwgRGF0YVR5cGUgfSBmcm9tICdhcGFjaGUtYXJyb3cnO1xuaW1wb3J0IHsgVEtleSwgVEZpZWxkLCBUU2NoZW1hLCBURmllbGRzTWFwIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkVG9LZXkoZmllbGQ6IEZpZWxkKSB7IHJldHVybiBmaWVsZC5uYW1lOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdOdWxsQml0bWFwKGxlbmd0aDogbnVtYmVyLCBmaWxsID0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKChsZW5ndGggKyA2MykgJiB+NjMpID4+PiAzKS5maWxsKGZpbGwgPyAyNTUgOiAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0VtcHR5RGF0YTxUIGV4dGVuZHMgRGF0YVR5cGU+KGRhdGE6IERhdGE8VD4sIGxlbmd0aDogbnVtYmVyKTogRGF0YTxUPiB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZXMsIHZhbHVlT2Zmc2V0cywgdHlwZUlkcywgY2hpbGREYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSA8YW55PiBbLCwgbmV3TnVsbEJpdG1hcChsZW5ndGgpXSBhcyBCdWZmZXJzPFQ+O1xuICAgIHZhbHVlT2Zmc2V0cyAmJiAoYnVmZmVyc1swXSA9IG5ldyBJbnQzMkFycmF5KGxlbmd0aCArIDEpKTtcbiAgICB2YWx1ZXMgICAgICAgJiYgKGJ1ZmZlcnNbMV0gPSBuZXcgZGF0YS5BcnJheVR5cGUobGVuZ3RoKSk7XG4gICAgdHlwZUlkcyAgICAgICYmIChidWZmZXJzWzNdID0gbmV3IEludDMyQXJyYXkobGVuZ3RoKSk7XG4gICAgcmV0dXJuIGRhdGEuY2xvbmUoXG4gICAgICAgIHR5cGUsIDAsIGxlbmd0aCwgbGVuZ3RoLCBidWZmZXJzLFxuICAgICAgICBjaGlsZERhdGEubWFwKChkKSA9PiBuZXdFbXB0eURhdGEoZCwgbGVuZ3RoKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduRmllbGRzTWFwPFQgZXh0ZW5kcyBUU2NoZW1hPihmaWVsZHM6IEZpZWxkW10gPSBbXSwgbWFwOiBURmllbGRzTWFwPFQ+ID0gbmV3IE1hcCgpLCBvZmZzZXQgPSBtYXAuc2l6ZSkge1xuICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChtYXAsIGYsIGkpID0+IG1hcC5oYXMoZmllbGRUb0tleShmKSlcbiAgICAgICAgICAgID8gbWFwIDogbWFwLnNldChmaWVsZFRvS2V5KGYpLCBbZiBhcyBURmllbGQ8VD4sIG9mZnNldCArIGldKSxcbiAgICAgICAgbWFwIHx8IG5ldyBNYXAoKVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcHM8VEtleSwgVFZhbD4odGFyZ2V0OiBNYXA8VEtleSwgVFZhbD4gPSBuZXcgTWFwKCksIC4uLnNvdXJjZXM6IE1hcDxUS2V5LCBUVmFsPltdKSB7XG4gICAgcmV0dXJuIHNvdXJjZXMucmVkdWNlKCh0YXJnZXQsIHNvdXJjZSkgPT4ge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaCgodmFsLCBrZXkpID0+IHRhcmdldC5zZXQoa2V5LCB2YWwpKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LCB0YXJnZXQgfHwgbmV3IE1hcCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmROZXdGaWVsZHM8VCBleHRlbmRzIFRTY2hlbWEsIFIgZXh0ZW5kcyBUU2NoZW1hPihtYXA6IFRGaWVsZHNNYXA8VD4sIGZpZWxkczogVEZpZWxkPFI+W10sIG1lcmdlT246IFRLZXk8VCAmIFI+KSB7XG4gICAgcmV0dXJuIGZpZWxkcy5maWx0ZXIoKGY6IFRGaWVsZDxSPiB8IFRLZXk8VCAmIFI+KSA9PiAhbWFwLmhhcyhmID0gZmllbGRUb0tleShmIGFzIFRGaWVsZDxSPikpICYmIChmICE9PSBtZXJnZU9uKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ29tbW9uRmllbGRzPFQgZXh0ZW5kcyBUU2NoZW1hLCBSIGV4dGVuZHMgVFNjaGVtYT4obWFwOiBURmllbGRzTWFwPFQ+LCBmaWVsZHM6IFRGaWVsZDxSPltdLCBtZXJnZU9uOiBUS2V5PFQgJiBSPikge1xuICAgIHJldHVybiBmaWVsZHMuZmlsdGVyKChmOiBURmllbGQ8Uj4gfCBUS2V5PFQgJiBSPikgPT4gbWFwLmhhcyhmID0gZmllbGRUb0tleShmIGFzIFRGaWVsZDxSPikpICYmIChmICE9PSBtZXJnZU9uKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWVyZ2VPbktleTxUIGV4dGVuZHMgVFNjaGVtYSwgUiBleHRlbmRzIFRTY2hlbWE+KG1lcmdlT246IFRGaWVsZDxUICYgUj4gfCBUS2V5PFQgJiBSPiwgZmllbGRzTWFwOiBURmllbGRzTWFwPFQgJiBSPikge1xuICAgIGlmICghKG1lcmdlT24gaW5zdGFuY2VvZiBGaWVsZCkpIHtcbiAgICAgICAgZm9yIChsZXQgWywgW2ZdXSBvZiBmaWVsZHNNYXApIHtcbiAgICAgICAgICAgIGlmIChmLm5hbWUgPT09IG1lcmdlT24pIHsgcmV0dXJuIGZpZWxkVG9LZXkoZiBhcyBURmllbGQ8VCAmIFI+KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghKG1lcmdlT24gaW5zdGFuY2VvZiBGaWVsZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgJ21lcmdlT24nIG11c3QgYmUgYW4gQXJyb3cgRmllbGQgb3IgdGhlIG5hbWUgb2YgYSBmaWVsZCBpbiB0aGUgdGFyZ2V0IHRhYmxlLiBSZWNlaXZlZCAke21lcmdlT259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkVG9LZXkobWVyZ2VPbik7XG59XG4iXX0=