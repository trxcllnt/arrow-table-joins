"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apache_arrow_1 = require("apache-arrow");
const util_1 = require("../util");
function assignNewEmptyColumns(newFields, outerRecordBatch, outerFieldsMap, innerRecordBatch, innerFieldsMap) {
    if (newFields.length <= 0) {
        return [
            outerRecordBatch, outerFieldsMap
        ];
    }
    let vector, length = outerRecordBatch.length;
    const data = outerRecordBatch.data.childData.slice();
    const fields = outerRecordBatch.schema.fields.slice();
    for (const field of newFields) {
        const key = util_1.fieldToKey(field);
        if (outerFieldsMap.has(key)) {
            continue;
        }
        vector = innerRecordBatch.getChildAt(innerFieldsMap.get(key)[1]);
        if (vector) {
            fields.push(field);
            data.push(util_1.newEmptyData(vector.data, length));
        }
    }
    return [
        new apache_arrow_1.RecordBatch(new apache_arrow_1.Schema(fields, outerRecordBatch.schema.metadata), length, data),
        util_1.assignFieldsMap(newFields, outerFieldsMap)
    ];
}
exports.assignNewEmptyColumns = assignNewEmptyColumns;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXNzaWduL2VtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQW1EO0FBRW5ELGtDQUFvRTtBQUVwRSxTQUFnQixxQkFBcUIsQ0FDakMsU0FBc0IsRUFDdEIsZ0JBQWdDLEVBQUUsY0FBNkIsRUFDL0QsZ0JBQWdDLEVBQUUsY0FBNkI7SUFHL0QsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUN2QixPQUFPO1lBQ0csZ0JBQWdCLEVBQUUsY0FBYztTQUNFLENBQUM7S0FDaEQ7SUFFRCxJQUFJLE1BQU0sRUFBRSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQzdDLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFvQixDQUFDO0lBQ3ZFLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFxQixDQUFDO0lBRXpFLEtBQUssTUFBTSxLQUFLLElBQUksU0FBUyxFQUFFO1FBQzNCLE1BQU0sR0FBRyxHQUFHLGlCQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQWMsQ0FBQyxFQUFFO1lBQUUsU0FBUztTQUFFO1FBQ3JELE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFzQixDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFpQixDQUFDLENBQUM7U0FDaEU7S0FDSjtJQUVELE9BQU87UUFDSCxJQUFJLDBCQUFXLENBQVEsSUFBSSxxQkFBTSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQztRQUMxRixzQkFBZSxDQUFRLFNBQVMsRUFBRSxjQUFtQyxDQUFDO0tBQ3pFLENBQUM7QUFDTixDQUFDO0FBOUJELHNEQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgUmVjb3JkQmF0Y2ggfSBmcm9tICdhcGFjaGUtYXJyb3cnO1xuaW1wb3J0IHsgVERhdGEsIFRGaWVsZCwgVFNjaGVtYSwgVEZpZWxkc01hcCB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgbmV3RW1wdHlEYXRhLCBhc3NpZ25GaWVsZHNNYXAsIGZpZWxkVG9LZXkgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbk5ld0VtcHR5Q29sdW1uczxUIGV4dGVuZHMgVFNjaGVtYSwgUiBleHRlbmRzIFRTY2hlbWE+KFxuICAgIG5ld0ZpZWxkczogVEZpZWxkPFI+W10sXG4gICAgb3V0ZXJSZWNvcmRCYXRjaDogUmVjb3JkQmF0Y2g8VD4sIG91dGVyRmllbGRzTWFwOiBURmllbGRzTWFwPFQ+LFxuICAgIGlubmVyUmVjb3JkQmF0Y2g6IFJlY29yZEJhdGNoPFI+LCBpbm5lckZpZWxkc01hcDogVEZpZWxkc01hcDxSPlxuKSA6IFtSZWNvcmRCYXRjaDxUICYgUj4sIFRGaWVsZHNNYXA8VCAmIFI+XSB7XG5cbiAgICBpZiAobmV3RmllbGRzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICA8YW55PiBvdXRlclJlY29yZEJhdGNoLCBvdXRlckZpZWxkc01hcFxuICAgICAgICBdIGFzIFtSZWNvcmRCYXRjaDxUICYgUj4sIFRGaWVsZHNNYXA8VCAmIFI+XTtcbiAgICB9XG5cbiAgICBsZXQgdmVjdG9yLCBsZW5ndGggPSBvdXRlclJlY29yZEJhdGNoLmxlbmd0aDtcbiAgICBjb25zdCBkYXRhID0gb3V0ZXJSZWNvcmRCYXRjaC5kYXRhLmNoaWxkRGF0YS5zbGljZSgpIGFzIFREYXRhPFQgJiBSPltdO1xuICAgIGNvbnN0IGZpZWxkcyA9IG91dGVyUmVjb3JkQmF0Y2guc2NoZW1hLmZpZWxkcy5zbGljZSgpIGFzIFRGaWVsZDxUICYgUj5bXTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIG5ld0ZpZWxkcykge1xuICAgICAgICBjb25zdCBrZXkgPSBmaWVsZFRvS2V5KGZpZWxkKTtcbiAgICAgICAgaWYgKG91dGVyRmllbGRzTWFwLmhhcyhrZXkgYXMga2V5b2YgVCkpIHsgY29udGludWU7IH1cbiAgICAgICAgdmVjdG9yID0gaW5uZXJSZWNvcmRCYXRjaC5nZXRDaGlsZEF0KGlubmVyRmllbGRzTWFwLmdldChrZXkpIVsxXSk7XG4gICAgICAgIGlmICh2ZWN0b3IpIHtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkIGFzIFRGaWVsZDxUICYgUj4pO1xuICAgICAgICAgICAgZGF0YS5wdXNoKG5ld0VtcHR5RGF0YSh2ZWN0b3IuZGF0YSwgbGVuZ3RoKSBhcyBURGF0YTxUICYgUj4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgbmV3IFJlY29yZEJhdGNoPFQgJiBSPihuZXcgU2NoZW1hKGZpZWxkcywgb3V0ZXJSZWNvcmRCYXRjaC5zY2hlbWEubWV0YWRhdGEpLCBsZW5ndGgsIGRhdGEpLFxuICAgICAgICBhc3NpZ25GaWVsZHNNYXA8VCAmIFI+KG5ld0ZpZWxkcywgb3V0ZXJGaWVsZHNNYXAgYXMgVEZpZWxkc01hcDxUICYgUj4pXG4gICAgXTtcbn1cbiJdfQ==